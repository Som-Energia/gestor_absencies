# Generated by Django 2.1.7 on 2019-03-18 12:05

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('swingtime', '0002_auto_20190313_0819'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('category', models.CharField(default='', max_length=50, verbose_name='')),
                ('holidays', models.IntegerField(default=0, verbose_name='')),
                ('gender', models.CharField(default='', max_length=50, verbose_name='')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Base',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('create_date', models.DateTimeField(auto_now_add=True, help_text='Date when this object was saved', verbose_name='Create date')),
                ('modified_date', models.DateTimeField(auto_now=True, help_text='Date when this object was modified', verbose_name='Modified date')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_referent', models.BooleanField(default=False, verbose_name='Referent in Team')),
                ('is_representant', models.BooleanField(default=False, verbose_name='IT Representant in Team')),
                ('worker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('is_representant', 'is_referent'),
            },
        ),
        migrations.CreateModel(
            name='SomEnergiaAbsence',
            fields=[
                ('event_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='swingtime.Event')),
            ],
            bases=('swingtime.event',),
        ),
        migrations.CreateModel(
            name='SomEnergiaAbsenceType',
            fields=[
                ('eventtype_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='swingtime.EventType')),
                ('spend_days', models.BooleanField(default=True, verbose_name='')),
                ('max_duration', models.DecimalField(decimal_places=1, default=0, max_digits=10, verbose_name='')),
                ('min_duration', models.DecimalField(decimal_places=1, default=0, max_digits=10, verbose_name='')),
            ],
            bases=('swingtime.eventtype',),
        ),
        migrations.CreateModel(
            name='SomEnergiaOccurrence',
            fields=[
                ('occurrence_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='swingtime.Occurrence')),
                ('absence', models.ForeignKey(editable=False, on_delete=django.db.models.deletion.CASCADE, to='gestor_absencies.SomEnergiaAbsence')),
            ],
            bases=('swingtime.occurrence',),
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('base_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gestor_absencies.Base')),
                ('name', models.CharField(help_text='Team name', max_length=50, verbose_name='Team name')),
                ('members', models.ManyToManyField(through='gestor_absencies.Member', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('name',),
            },
            bases=('gestor_absencies.base',),
        ),
        migrations.CreateModel(
            name='VacationPolicy',
            fields=[
                ('base_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gestor_absencies.Base')),
                ('name', models.CharField(max_length=50, verbose_name='')),
                ('description', models.CharField(max_length=250, verbose_name='')),
                ('holidays', models.IntegerField(default=0, verbose_name='')),
            ],
            bases=('gestor_absencies.base',),
        ),
        migrations.AddField(
            model_name='somenergiaabsence',
            name='absence_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestor_absencies.SomEnergiaAbsenceType', verbose_name=''),
        ),
        migrations.AddField(
            model_name='somenergiaabsence',
            name='worker',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name=''),
        ),
        migrations.AddField(
            model_name='member',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gestor_absencies.Team'),
        ),
        migrations.AddField(
            model_name='worker',
            name='vacation_policy',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='gestor_absencies.VacationPolicy', verbose_name=''),
        ),
    ]
